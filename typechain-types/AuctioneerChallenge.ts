/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuctioneerChallengeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXPONENT_CONSTANT"
      | "auctionIdToWinnerData"
      | "auctioneer"
      | "axiomCallbackQuerySchema"
      | "axiomV2Callback"
      | "axiomV2QueryAddress"
      | "callbackSourceChainId"
      | "hasClaimed"
      | "publishWinner"
      | "querySubmitted"
      | "updateAuctioneer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActioneerUpdated"
      | "AuctioneerPunished"
      | "AxiomCallbackQuerySchemaUpdated"
      | "AxiomV2Call"
      | "PublishWinner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXPONENT_CONSTANT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionIdToWinnerData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "axiomCallbackQuerySchema",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "axiomV2Callback",
    values: [
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike,
      BytesLike[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "axiomV2QueryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callbackSourceChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "publishWinner",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "querySubmitted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuctioneer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXPONENT_CONSTANT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionIdToWinnerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctioneer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "axiomCallbackQuerySchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "axiomV2Callback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "axiomV2QueryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackSourceChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuctioneer",
    data: BytesLike
  ): Result;
}

export namespace ActioneerUpdatedEvent {
  export type InputTuple = [
    OldAuctioneer: AddressLike,
    NewAuctioneer: AddressLike
  ];
  export type OutputTuple = [OldAuctioneer: string, NewAuctioneer: string];
  export interface OutputObject {
    OldAuctioneer: string;
    NewAuctioneer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuctioneerPunishedEvent {
  export type InputTuple = [
    challenger: AddressLike,
    auctionId: BigNumberish,
    punishmentAmount: BigNumberish,
    axiomResults: BytesLike[]
  ];
  export type OutputTuple = [
    challenger: string,
    auctionId: bigint,
    punishmentAmount: bigint,
    axiomResults: string[]
  ];
  export interface OutputObject {
    challenger: string;
    auctionId: bigint;
    punishmentAmount: bigint;
    axiomResults: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AxiomCallbackQuerySchemaUpdatedEvent {
  export type InputTuple = [axiomCallbackQuerySchema: BytesLike];
  export type OutputTuple = [axiomCallbackQuerySchema: string];
  export interface OutputObject {
    axiomCallbackQuerySchema: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AxiomV2CallEvent {
  export type InputTuple = [
    sourceChainId: BigNumberish,
    callerAddr: AddressLike,
    querySchema: BytesLike,
    queryHash: BytesLike
  ];
  export type OutputTuple = [
    sourceChainId: bigint,
    callerAddr: string,
    querySchema: string,
    queryHash: string
  ];
  export interface OutputObject {
    sourceChainId: bigint;
    callerAddr: string;
    querySchema: string;
    queryHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublishWinnerEvent {
  export type InputTuple = [
    auctionId: BigNumberish,
    sellingAmount: BigNumberish,
    buyingAmount: BigNumberish,
    winningAddress: AddressLike,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    auctionId: bigint,
    sellingAmount: bigint,
    buyingAmount: bigint,
    winningAddress: string,
    blockNumber: bigint
  ];
  export interface OutputObject {
    auctionId: bigint;
    sellingAmount: bigint;
    buyingAmount: bigint;
    winningAddress: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuctioneerChallenge extends BaseContract {
  connect(runner?: ContractRunner | null): AuctioneerChallenge;
  waitForDeployment(): Promise<this>;

  interface: AuctioneerChallengeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXPONENT_CONSTANT: TypedContractMethod<[], [bigint], "view">;

  auctionIdToWinnerData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        auctionId: bigint;
        sellingAmount: bigint;
        buyingAmount: bigint;
        winningAddress: string;
      }
    ],
    "view"
  >;

  auctioneer: TypedContractMethod<[], [string], "view">;

  axiomCallbackQuerySchema: TypedContractMethod<[], [string], "view">;

  axiomV2Callback: TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      callerAddr: AddressLike,
      querySchema: BytesLike,
      queryHash: BytesLike,
      axiomResults: BytesLike[],
      callbackExtraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  axiomV2QueryAddress: TypedContractMethod<[], [string], "view">;

  callbackSourceChainId: TypedContractMethod<[], [bigint], "view">;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  publishWinner: TypedContractMethod<
    [
      auctionId: BigNumberish,
      sellingAmount: BigNumberish,
      buyingAmount: BigNumberish,
      signature: BytesLike,
      winningAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  querySubmitted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  updateAuctioneer: TypedContractMethod<
    [_auctioneer: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXPONENT_CONSTANT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctionIdToWinnerData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string] & {
        auctionId: bigint;
        sellingAmount: bigint;
        buyingAmount: bigint;
        winningAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctioneer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "axiomCallbackQuerySchema"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "axiomV2Callback"
  ): TypedContractMethod<
    [
      sourceChainId: BigNumberish,
      callerAddr: AddressLike,
      querySchema: BytesLike,
      queryHash: BytesLike,
      axiomResults: BytesLike[],
      callbackExtraData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "axiomV2QueryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callbackSourceChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "publishWinner"
  ): TypedContractMethod<
    [
      auctionId: BigNumberish,
      sellingAmount: BigNumberish,
      buyingAmount: BigNumberish,
      signature: BytesLike,
      winningAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "querySubmitted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "updateAuctioneer"
  ): TypedContractMethod<[_auctioneer: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ActioneerUpdated"
  ): TypedContractEvent<
    ActioneerUpdatedEvent.InputTuple,
    ActioneerUpdatedEvent.OutputTuple,
    ActioneerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AuctioneerPunished"
  ): TypedContractEvent<
    AuctioneerPunishedEvent.InputTuple,
    AuctioneerPunishedEvent.OutputTuple,
    AuctioneerPunishedEvent.OutputObject
  >;
  getEvent(
    key: "AxiomCallbackQuerySchemaUpdated"
  ): TypedContractEvent<
    AxiomCallbackQuerySchemaUpdatedEvent.InputTuple,
    AxiomCallbackQuerySchemaUpdatedEvent.OutputTuple,
    AxiomCallbackQuerySchemaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AxiomV2Call"
  ): TypedContractEvent<
    AxiomV2CallEvent.InputTuple,
    AxiomV2CallEvent.OutputTuple,
    AxiomV2CallEvent.OutputObject
  >;
  getEvent(
    key: "PublishWinner"
  ): TypedContractEvent<
    PublishWinnerEvent.InputTuple,
    PublishWinnerEvent.OutputTuple,
    PublishWinnerEvent.OutputObject
  >;

  filters: {
    "ActioneerUpdated(address,address)": TypedContractEvent<
      ActioneerUpdatedEvent.InputTuple,
      ActioneerUpdatedEvent.OutputTuple,
      ActioneerUpdatedEvent.OutputObject
    >;
    ActioneerUpdated: TypedContractEvent<
      ActioneerUpdatedEvent.InputTuple,
      ActioneerUpdatedEvent.OutputTuple,
      ActioneerUpdatedEvent.OutputObject
    >;

    "AuctioneerPunished(address,uint256,uint256,bytes32[])": TypedContractEvent<
      AuctioneerPunishedEvent.InputTuple,
      AuctioneerPunishedEvent.OutputTuple,
      AuctioneerPunishedEvent.OutputObject
    >;
    AuctioneerPunished: TypedContractEvent<
      AuctioneerPunishedEvent.InputTuple,
      AuctioneerPunishedEvent.OutputTuple,
      AuctioneerPunishedEvent.OutputObject
    >;

    "AxiomCallbackQuerySchemaUpdated(bytes32)": TypedContractEvent<
      AxiomCallbackQuerySchemaUpdatedEvent.InputTuple,
      AxiomCallbackQuerySchemaUpdatedEvent.OutputTuple,
      AxiomCallbackQuerySchemaUpdatedEvent.OutputObject
    >;
    AxiomCallbackQuerySchemaUpdated: TypedContractEvent<
      AxiomCallbackQuerySchemaUpdatedEvent.InputTuple,
      AxiomCallbackQuerySchemaUpdatedEvent.OutputTuple,
      AxiomCallbackQuerySchemaUpdatedEvent.OutputObject
    >;

    "AxiomV2Call(uint64,address,bytes32,bytes32)": TypedContractEvent<
      AxiomV2CallEvent.InputTuple,
      AxiomV2CallEvent.OutputTuple,
      AxiomV2CallEvent.OutputObject
    >;
    AxiomV2Call: TypedContractEvent<
      AxiomV2CallEvent.InputTuple,
      AxiomV2CallEvent.OutputTuple,
      AxiomV2CallEvent.OutputObject
    >;

    "PublishWinner(uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      PublishWinnerEvent.InputTuple,
      PublishWinnerEvent.OutputTuple,
      PublishWinnerEvent.OutputObject
    >;
    PublishWinner: TypedContractEvent<
      PublishWinnerEvent.InputTuple,
      PublishWinnerEvent.OutputTuple,
      PublishWinnerEvent.OutputObject
    >;
  };
}
