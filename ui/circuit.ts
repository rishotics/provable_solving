//This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
//To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
//
//                 _                 _____  ______ _____  _
//     /\         (_)               |  __ \|  ____|  __ \| |
//    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
//   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
//  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
// /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
//
//

import {
  Halo2Lib,
  AxiomData,
  CircuitValue
} from "@axiom-crypto/experimental/halo2-js";
import { CircuitValue256 } from "@axiom-crypto/experimental/v2/circuit/CircuitValue256";
const defaultInputs = {
  winning_contract_address: ["0x3041CbD36888bECc7bbCBc0045E3B1f144466f5f"],
  token0: ["0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"],
  token1: ["0xdAC17F958D2ee523a2206206994597C13D831ec7"],
  token0Reserve: [321312312],
  token1Reserve: [321312312],
  block: [15002251],
  numSolutions: 1,
  published_auction_id: 1,
  published_sell: "0x8f0A561075aA46833c5519001b7579E58EC825C9",
  published_amount: 1000,
  published_buy: "0x8f0A561075aA46833c5519001b7579E58EC825C9",
  published_task_signature: "",
  published_winning_value: 2131312312321321,

  challenge_auction_id: 1,
  challenge_sell: "0x8f0A561075aA46833c5519001b7579E58EC825C9",
  challenge_amount: 1000,
  challenge_buy: "0x8f0A561075aA46833c5519001b7579E58EC825C9",
  challenge_task_signature: "",
  challenge_solution: "",
  challenge_value: 2131312312321322,
  challenge_signature: "",
  challenge_receipt: ""
};
type CircuitInputType = typeof defaultInputs;
export interface CircuitInputs extends CircuitInputType {}
export interface CircuitValueInputs {
  winning_contract_address: CircuitValue[];
  token0: CircuitValue[];
  token1: CircuitValue[];
  token0Reserve: CircuitValue[];
  token1Reserve: CircuitValue[];
  block: CircuitValue[];
  numSolutions: CircuitValue;
  published_auction_id: CircuitValue;
  published_sell: CircuitValue;
  published_amount: CircuitValue;
  published_buy: CircuitValue;
  published_task_signature: CircuitValue;
  published_winning_value: CircuitValue;
  challenge_auction_id: CircuitValue;
  challenge_sell: CircuitValue;
  challenge_amount: CircuitValue;
  challenge_buy: CircuitValue;
  challenge_task_signature: CircuitValue;
  challenge_solution: CircuitValue;
  challenge_value: CircuitValue;
  challenge_signature: CircuitValue;
  challenge_receipt: CircuitValue;
}
const circuitFn = async (
  halo2Lib: Halo2Lib,
  axiomData: AxiomData,
  {
    winning_contract_address,
    token0,
    token1,
    token0Reserve,
    token1Reserve,
    block,
    numSolutions,
    published_auction_id,
    published_sell,
    published_amount,
    published_buy,
    published_task_signature,
    published_winning_value,
    challenge_auction_id,
    challenge_sell,
    challenge_amount,
    challenge_buy,
    challenge_task_signature,
    challenge_solution,
    challenge_value,
    challenge_signature,
    challenge_receipt
  }: CircuitValueInputs
) => {
  const {
    witness,
    constant,
    add,
    sub,
    mul,
    and,
    or,
    isEqual,
    checkEqual,
    isLessThan,
    div,
    value,
    log
  } = halo2Lib;
  const { getAccount, getStorage } = axiomData;
  /*
    Step 1: Prove that the winning solution auctioneer submitted is correct.
    Step 2: Verify the reciept is the one aunctioneer sent to the solver
    Step 3: Compare winning solution and solver's solution
*/

  //This file is generated by the AxiomREPL. DO NOT DIRECTLY EDIT THIS FILE!
  //To make changes, go to https://repl.axiom.xyz/ and export a new circuit.
  //
  //                 _                 _____  ______ _____  _
  //     /\         (_)               |  __ \|  ____|  __ \| |
  //    /  \   __  ___  ___  _ __ ___ | |__) | |__  | |__) | |
  //   / /\ \  \ \/ / |/ _ \| '_ ` _ \|  _  /|  __| |  ___/| |
  //  / ____ \  >  <| | (_) | | | | | | | \ \| |____| |    | |____
  // /_/    \_\/_/\_\_|\___/|_| |_| |_|_|  \_\______|_|    |______|
  //
  //

  // Some constants

  const zero = constant(0);
  const one = constant(1);

  //--------------------------------------------------------------------------------------------------

  // Step 1: count block age, if > 3 days, challenge fail

  // Q1 : Do it in EVM?
  // Rishabh: this check makes sense more in Smart contract, wdyt?

  //--------------------------------------------------------------------------------------------------

  // Step 2: verify auctioneer published legal winning solution

  // substep 2.0: read the winning solution [Ex1,Ex2, …], make sure they are in valid form

  // Q2 : want to read from smart contract's storage instead of inputs to the circuit?

  checkEqual(witness(winning_contract_address.length), numSolutions);
  checkEqual(witness(token0.length), numSolutions);
  checkEqual(witness(token1.length), numSolutions);
  checkEqual(witness(block.length), numSolutions);

  // substep 2.1: follow [Ex1, Ex2, ..], read history data of amounts of currency of each pool
  //              store them in a map
  //              update value, and check for each exchange Exi, we have enough amount of related selling currency

  const map = new Map();

  // Q3 : same, read from uniswap pool history balance

  for (var i = 0; i < numSolutions.value(); i++) {
    //   let pool = getAccount(winning_contract_address[i], block[i]);
    //extract value of tokens prices from the pool of uinswap v2
    const storage = getStorage(block[i], winning_contract_address[i]);
    //   log(storage);

    // gets the value of the specified slot in the contract's storage
    //   const slotValueToken0Reserve = storage.slot(constant(5));
    //   const slotValueToken1Reserve = storage.slot(constant(6));
    //   checkEqual(token0Reserve[i], slotValueToken0Reserve.toCircuitValue());
    //   checkEqual(token1Reserve[i], slotValueToken1Reserve.toCircuitValue());

    checkUniswapV2Exec(
      challenge_value,
      token0Reserve[i],
      token1Reserve[i],
      challenge_amount
    );
  }

  function checkUniswapV2Exec(
    challengeAmountOut,
    reserveIn,
    reserveOut,
    token0in
  ) {
    //code from uniV2 https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2Library.sol#L43
    //      uint amountInWithFee = amountIn.mul(997);
    //     uint numerator = amountInWithFee.mul(reserveOut);
    //     uint denominator = reserveIn.mul(1000).add(amountInWithFee);
    //     amountOut = numerator / denominator;
    const amountInWithFee = mul(token0in, constant(997));
    log(amountInWithFee);
    const numerator = mul(amountInWithFee, reserveOut);
    const denominator = add(mul(constant(1000), reserveIn), amountInWithFee);
    const amountOut = div(numerator, denominator);
    // checkEqual(amountOut, challengeAmountOut);
  }

  // substep 2.2: follow Ex1, Ex2, …, verify they are legal and also update amounts of currencies in pools

  // substep 2.3: the final amount of C1 is no smaller than the published winning value Vw.

  //--------------------------------------------------------------------------------------------------

  // Step 3: verify the challenged task by comparing to the published one
  //         verify challenger's solution by verifying the receipt he provides
  //         signature verification part is currently in EVM, waiting for Axiom's ecrecover of signature verification

  let isSameId = isEqual(published_auction_id, challenge_auction_id);
  let isSameSell = isEqual(published_sell, challenge_sell);
  let isSameBuy = isEqual(published_buy, challenge_buy);
  let isSameAmount = isEqual(published_amount, challenge_amount);
  let isSameSignature = isEqual(
    published_task_signature,
    challenge_task_signature
  );

  if (
    isSameId == zero ||
    isSameSell == zero ||
    isSameBuy == zero ||
    isSameAmount == zero ||
    isSameSignature == zero
  ) {
    // challenge fail
  }

  //--------------------------------------------------------------------------------------------------

  // Step 4: compare winning value and challenger's value

  let challenge_success = isLessThan(published_winning_value, challenge_value);
  if (challenge_success == zero) {
    // challenge fail
  } else {
    // challenge success, splash auctioneer
  }

  //------------------------------------------------------------------------------------------
  //-----------------------------------------------------------------------------------------
  //------------------------------------------------------------------------------------------

  //
};
const config = {
  k: 13,
  numAdvice: 4,
  numLookupAdvice: 1,
  numInstance: 1,
  numLookupBits: 12,
  numVirtualInstance: 2
};
const vk = [
  2,
  13,
  0,
  0,
  0,
  0,
  6,
  0,
  0,
  0,
  22,
  53,
  175,
  191,
  189,
  44,
  47,
  125,
  102,
  223,
  68,
  183,
  53,
  24,
  221,
  245,
  11,
  40,
  210,
  84,
  147,
  34,
  241,
  111,
  251,
  44,
  176,
  97,
  40,
  23,
  111,
  5,
  236,
  172,
  54,
  30,
  205,
  68,
  139,
  37,
  34,
  255,
  110,
  222,
  63,
  213,
  167,
  105,
  46,
  125,
  148,
  2,
  105,
  228,
  6,
  175,
  114,
  9,
  31,
  238,
  182,
  133,
  168,
  45,
  239,
  2,
  5,
  56,
  102,
  139,
  230,
  228,
  0,
  108,
  94,
  240,
  97,
  214,
  250,
  140,
  47,
  136,
  25,
  45,
  25,
  14,
  17,
  131,
  44,
  222,
  11,
  222,
  35,
  145,
  185,
  22,
  2,
  13,
  71,
  122,
  25,
  76,
  214,
  203,
  241,
  133,
  100,
  193,
  18,
  255,
  150,
  67,
  235,
  216,
  214,
  31,
  121,
  27,
  191,
  226,
  31,
  20,
  57,
  122,
  47,
  200,
  88,
  42,
  46,
  124,
  142,
  110,
  218,
  151,
  250,
  217,
  107,
  160,
  30,
  195,
  198,
  104,
  224,
  60,
  89,
  27,
  23,
  168,
  252,
  58,
  216,
  113,
  229,
  21,
  107,
  179,
  243,
  43,
  198,
  26,
  228,
  163,
  7,
  48,
  82,
  107,
  81,
  84,
  122,
  159,
  245,
  62,
  201,
  92,
  73,
  8,
  148,
  59,
  79,
  73,
  41,
  166,
  47,
  208,
  62,
  47,
  251,
  56,
  105,
  58,
  48,
  47,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  118,
  54,
  156,
  84,
  174,
  140,
  147,
  247,
  45,
  63,
  34,
  191,
  6,
  190,
  144,
  205,
  129,
  179,
  239,
  130,
  17,
  57,
  191,
  152,
  137,
  153,
  118,
  114,
  107,
  59,
  72,
  5,
  200,
  228,
  58,
  105,
  218,
  112,
  228,
  54,
  65,
  98,
  153,
  195,
  115,
  26,
  226,
  155,
  138,
  65,
  24,
  151,
  164,
  101,
  37,
  99,
  13,
  119,
  180,
  163,
  115,
  98,
  150,
  26,
  106,
  167,
  118,
  140,
  82,
  161,
  102,
  135,
  183,
  242,
  12,
  189,
  51,
  83,
  244,
  1,
  26,
  144,
  110,
  105,
  208,
  65,
  211,
  112,
  52,
  9,
  209,
  122,
  242,
  198,
  184,
  25,
  160,
  210,
  231,
  131,
  241,
  98,
  138,
  37,
  20,
  73,
  84,
  62,
  152,
  204,
  64,
  137,
  24,
  146,
  238,
  165,
  94,
  203,
  72,
  227,
  119,
  115,
  92,
  59,
  26,
  119,
  58,
  4,
  129,
  32,
  221,
  160,
  2,
  15,
  131,
  249,
  95,
  54,
  190,
  51,
  37,
  210,
  75,
  10,
  123,
  164,
  170,
  220,
  46,
  2,
  32,
  0,
  126,
  162,
  161,
  23,
  118,
  254,
  8,
  8,
  145,
  202,
  133,
  199,
  119,
  206,
  57,
  43,
  71,
  250,
  177,
  202,
  247,
  247,
  49,
  208,
  24,
  55,
  134,
  206,
  167,
  14,
  195,
  5,
  67,
  75,
  229,
  119,
  93,
  216,
  75,
  48,
  129,
  127,
  109,
  132,
  109,
  219,
  168,
  23,
  159,
  8,
  162,
  147,
  15,
  247,
  240,
  86,
  108,
  80,
  248,
  240,
  65,
  159,
  237,
  247,
  215,
  190,
  191,
  70,
  240,
  218,
  95,
  15,
  139,
  84,
  196,
  177,
  252,
  158,
  196,
  233,
  173,
  21,
  59,
  139,
  120,
  126,
  241,
  79,
  176,
  156,
  21,
  225,
  98,
  163,
  218,
  200,
  210,
  106,
  88,
  71,
  32,
  119,
  134,
  30,
  248,
  17,
  160,
  55,
  121,
  168,
  124,
  85,
  5,
  232,
  156,
  11,
  224,
  89,
  116,
  78,
  181,
  45,
  120,
  198,
  223,
  203,
  156,
  189,
  160,
  140,
  117,
  105,
  10,
  53,
  212,
  37,
  140,
  202,
  224,
  95,
  204,
  114,
  5,
  234,
  227,
  19,
  84,
  3,
  218,
  83,
  80,
  10,
  207,
  66,
  72,
  41,
  104,
  80,
  210,
  173,
  6,
  147,
  3,
  3,
  204,
  9,
  218,
  43,
  30,
  28,
  159,
  98,
  140,
  225,
  227,
  221,
  145,
  123,
  216,
  24,
  98,
  30,
  15,
  81,
  66,
  201,
  199,
  140,
  49,
  68,
  95,
  233,
  180,
  167,
  189,
  29,
  140,
  163,
  68,
  4,
  94,
  183,
  148,
  247,
  104,
  170,
  179,
  100,
  238,
  30,
  226,
  139,
  250,
  208,
  199,
  43,
  148,
  115,
  136,
  96,
  135,
  167,
  190,
  164,
  53,
  8,
  50,
  171,
  210,
  127,
  15,
  11,
  127,
  58,
  235,
  71,
  66,
  14,
  39,
  62,
  176,
  247,
  1,
  176,
  146,
  216,
  103,
  34,
  76,
  141,
  237,
  132,
  23,
  65,
  71,
  228,
  125,
  5,
  157,
  118,
  198,
  98,
  67,
  41,
  160,
  151,
  221,
  30,
  88,
  99,
  135,
  80,
  86,
  106,
  169,
  20,
  208,
  71,
  132,
  196,
  120,
  176,
  118,
  115,
  116,
  59,
  58,
  220,
  67,
  199,
  69,
  58,
  115,
  202,
  104,
  23
];
export const circuit = Object.freeze({
  circuit: circuitFn,
  config,
  defaultInputs,
  vk
});
